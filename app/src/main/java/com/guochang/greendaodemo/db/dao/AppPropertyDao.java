package com.guochang.greendaodemo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.guochang.greendaodemo.db.entity.AppProperty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table app_property.
*/
public class AppPropertyDao extends AbstractDao<AppProperty, Void> {

    public static final String TABLENAME = "app_property";

    /**
     * Properties of entity AppProperty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PropertyKey = new Property(0, String.class, "propertyKey", false, "PROPERTY_KEY");
        public final static Property PropertyValue = new Property(1, String.class, "propertyValue", false, "PROPERTY_VALUE");
    };


    public AppPropertyDao(DaoConfig config) {
        super(config);
    }
    
    public AppPropertyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'app_property' (" + //
                "'PROPERTY_KEY' TEXT NOT NULL UNIQUE ," + // 0: propertyKey
                "'PROPERTY_VALUE' TEXT);"); // 1: propertyValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'app_property'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppProperty entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPropertyKey());
 
        String propertyValue = entity.getPropertyValue();
        if (propertyValue != null) {
            stmt.bindString(2, propertyValue);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AppProperty readEntity(Cursor cursor, int offset) {
        AppProperty entity = new AppProperty( //
            cursor.getString(offset + 0), // propertyKey
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // propertyValue
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppProperty entity, int offset) {
        entity.setPropertyKey(cursor.getString(offset + 0));
        entity.setPropertyValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AppProperty entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AppProperty entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
